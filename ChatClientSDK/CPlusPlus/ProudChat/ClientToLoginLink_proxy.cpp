




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "ClientToLoginLink_proxy.h"

namespace ClientToLogin {


        
	bool Proxy::Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Request;
__msg.Write(__msgid); 
	
__msg << ownerUuid;
__msg << projectUuid;
__msg << uniqueId;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Login_Request, (::Proud::RmiID)Rmi_Login_Request);
	}

	bool Proxy::Login_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Request;
__msg.Write(__msgid); 
	
__msg << ownerUuid;
__msg << projectUuid;
__msg << uniqueId;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Login_Request, (::Proud::RmiID)Rmi_Login_Request);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Login_Request =_PNT("Login_Request");
#else
const PNTCHAR* Proxy::RmiName_Login_Request =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Login_Request;

}


namespace LoginToClient {


        
	bool Proxy::Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Success;
__msg.Write(__msgid); 
	
__msg << secureKey;
__msg << address;
__msg << port;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Login_Success, (::Proud::RmiID)Rmi_Login_Success);
	}

	bool Proxy::Login_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & secureKey, const Proud::String & address, const uint16_t & port)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Success;
__msg.Write(__msgid); 
	
__msg << secureKey;
__msg << address;
__msg << port;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Login_Success, (::Proud::RmiID)Rmi_Login_Success);
	}
        
	bool Proxy::Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Login_Failed, (::Proud::RmiID)Rmi_Login_Failed);
	}

	bool Proxy::Login_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Login_Failed, (::Proud::RmiID)Rmi_Login_Failed);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Login_Success =_PNT("Login_Success");
#else
const PNTCHAR* Proxy::RmiName_Login_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Login_Failed =_PNT("Login_Failed");
#else
const PNTCHAR* Proxy::RmiName_Login_Failed =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Login_Success;

}



