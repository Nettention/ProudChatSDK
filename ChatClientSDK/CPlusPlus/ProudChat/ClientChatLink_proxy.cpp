




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "ClientChatLink_proxy.h"

namespace ClientToChat {


        
	bool Proxy::Connect_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Request;
__msg.Write(__msgid); 
	
__msg << secureKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Connect_Request, (::Proud::RmiID)Rmi_Connect_Request);
	}

	bool Proxy::Connect_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & secureKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Request;
__msg.Write(__msgid); 
	
__msg << secureKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Connect_Request, (::Proud::RmiID)Rmi_Connect_Request);
	}
        
	bool Proxy::DirectMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DirectMsg;
__msg.Write(__msgid); 
	
__msg << destUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_DirectMsg, (::Proud::RmiID)Rmi_DirectMsg);
	}

	bool Proxy::DirectMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & destUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DirectMsg;
__msg.Write(__msgid); 
	
__msg << destUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_DirectMsg, (::Proud::RmiID)Rmi_DirectMsg);
	}
        
	bool Proxy::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}

	bool Proxy::ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}
        
	bool Proxy::ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelJoin, (::Proud::RmiID)Rmi_ChannelJoin);
	}

	bool Proxy::ChannelJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelJoin, (::Proud::RmiID)Rmi_ChannelJoin);
	}
        
	bool Proxy::ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelLeave, (::Proud::RmiID)Rmi_ChannelLeave);
	}

	bool Proxy::ChannelLeave ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelLeave, (::Proud::RmiID)Rmi_ChannelLeave);
	}
        
	bool Proxy::GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Request;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GetChannelList_Request, (::Proud::RmiID)Rmi_GetChannelList_Request);
	}

	bool Proxy::GetChannelList_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Request;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GetChannelList_Request, (::Proud::RmiID)Rmi_GetChannelList_Request);
	}
        
	bool Proxy::MsgTranslate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & src, const Proud::String & target, const Proud::String & msgKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate;
__msg.Write(__msgid); 
	
__msg << src;
__msg << target;
__msg << msgKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgTranslate, (::Proud::RmiID)Rmi_MsgTranslate);
	}

	bool Proxy::MsgTranslate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & src, const Proud::String & target, const Proud::String & msgKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate;
__msg.Write(__msgid); 
	
__msg << src;
__msg << target;
__msg << msgKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgTranslate, (::Proud::RmiID)Rmi_MsgTranslate);
	}
        
	bool Proxy::MsgTranslate_auto ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & target, const Proud::String & msgKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_auto;
__msg.Write(__msgid); 
	
__msg << target;
__msg << msgKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgTranslate_auto, (::Proud::RmiID)Rmi_MsgTranslate_auto);
	}

	bool Proxy::MsgTranslate_auto ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & target, const Proud::String & msgKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_auto;
__msg.Write(__msgid); 
	
__msg << target;
__msg << msgKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgTranslate_auto, (::Proud::RmiID)Rmi_MsgTranslate_auto);
	}
        
	bool Proxy::MsgRecord_Channel ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const uint16_t & day, const uint16_t & cnt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Channel;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << day;
__msg << cnt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgRecord_Channel, (::Proud::RmiID)Rmi_MsgRecord_Channel);
	}

	bool Proxy::MsgRecord_Channel ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const uint16_t & day, const uint16_t & cnt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Channel;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << day;
__msg << cnt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgRecord_Channel, (::Proud::RmiID)Rmi_MsgRecord_Channel);
	}
        
	bool Proxy::MsgRecord_Direct ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & target, const uint16_t & day, const uint16_t & cnt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Direct;
__msg.Write(__msgid); 
	
__msg << target;
__msg << day;
__msg << cnt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgRecord_Direct, (::Proud::RmiID)Rmi_MsgRecord_Direct);
	}

	bool Proxy::MsgRecord_Direct ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & target, const uint16_t & day, const uint16_t & cnt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Direct;
__msg.Write(__msgid); 
	
__msg << target;
__msg << day;
__msg << cnt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgRecord_Direct, (::Proud::RmiID)Rmi_MsgRecord_Direct);
	}
        
	bool Proxy::MsgRecord_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const uint16_t & day, const uint16_t & cnt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Notice;
__msg.Write(__msgid); 
	
__msg << day;
__msg << cnt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgRecord_Notice, (::Proud::RmiID)Rmi_MsgRecord_Notice);
	}

	bool Proxy::MsgRecord_Notice ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const uint16_t & day, const uint16_t & cnt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Notice;
__msg.Write(__msgid); 
	
__msg << day;
__msg << cnt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgRecord_Notice, (::Proud::RmiID)Rmi_MsgRecord_Notice);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Connect_Request =_PNT("Connect_Request");
#else
const PNTCHAR* Proxy::RmiName_Connect_Request =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_DirectMsg =_PNT("DirectMsg");
#else
const PNTCHAR* Proxy::RmiName_DirectMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("ChannelMsg");
#else
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelJoin =_PNT("ChannelJoin");
#else
const PNTCHAR* Proxy::RmiName_ChannelJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelLeave =_PNT("ChannelLeave");
#else
const PNTCHAR* Proxy::RmiName_ChannelLeave =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GetChannelList_Request =_PNT("GetChannelList_Request");
#else
const PNTCHAR* Proxy::RmiName_GetChannelList_Request =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgTranslate =_PNT("MsgTranslate");
#else
const PNTCHAR* Proxy::RmiName_MsgTranslate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgTranslate_auto =_PNT("MsgTranslate_auto");
#else
const PNTCHAR* Proxy::RmiName_MsgTranslate_auto =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgRecord_Channel =_PNT("MsgRecord_Channel");
#else
const PNTCHAR* Proxy::RmiName_MsgRecord_Channel =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgRecord_Direct =_PNT("MsgRecord_Direct");
#else
const PNTCHAR* Proxy::RmiName_MsgRecord_Direct =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgRecord_Notice =_PNT("MsgRecord_Notice");
#else
const PNTCHAR* Proxy::RmiName_MsgRecord_Notice =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Connect_Request;

}


namespace ChatToClient {


        
	bool Proxy::Connect_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Success;
__msg.Write(__msgid); 
	
__msg << filtering;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Connect_Success, (::Proud::RmiID)Rmi_Connect_Success);
	}

	bool Proxy::Connect_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & filtering, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Success;
__msg.Write(__msgid); 
	
__msg << filtering;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Connect_Success, (::Proud::RmiID)Rmi_Connect_Success);
	}
        
	bool Proxy::Connect_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Connect_Failed, (::Proud::RmiID)Rmi_Connect_Failed);
	}

	bool Proxy::Connect_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Connect_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Connect_Failed, (::Proud::RmiID)Rmi_Connect_Failed);
	}
        
	bool Proxy::ChannelJoin_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin_Success;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelJoin_Success, (::Proud::RmiID)Rmi_ChannelJoin_Success);
	}

	bool Proxy::ChannelJoin_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin_Success;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelJoin_Success, (::Proud::RmiID)Rmi_ChannelJoin_Success);
	}
        
	bool Proxy::ChannelJoin_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin_Failed;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelJoin_Failed, (::Proud::RmiID)Rmi_ChannelJoin_Failed);
	}

	bool Proxy::ChannelJoin_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin_Failed;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelJoin_Failed, (::Proud::RmiID)Rmi_ChannelJoin_Failed);
	}
        
	bool Proxy::ChannelLeave_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave_Success;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelLeave_Success, (::Proud::RmiID)Rmi_ChannelLeave_Success);
	}

	bool Proxy::ChannelLeave_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave_Success;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelLeave_Success, (::Proud::RmiID)Rmi_ChannelLeave_Success);
	}
        
	bool Proxy::ChannelLeave_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave_Failed;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelLeave_Failed, (::Proud::RmiID)Rmi_ChannelLeave_Failed);
	}

	bool Proxy::ChannelLeave_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave_Failed;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelLeave_Failed, (::Proud::RmiID)Rmi_ChannelLeave_Failed);
	}
        
	bool Proxy::DirectMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DirectMsg;
__msg.Write(__msgid); 
	
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_DirectMsg, (::Proud::RmiID)Rmi_DirectMsg);
	}

	bool Proxy::DirectMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & srcUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DirectMsg;
__msg.Write(__msgid); 
	
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_DirectMsg, (::Proud::RmiID)Rmi_DirectMsg);
	}
        
	bool Proxy::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}

	bool Proxy::ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}
        
	bool Proxy::GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << channelList;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GetChannelList_Response, (::Proud::RmiID)Rmi_GetChannelList_Response);
	}

	bool Proxy::GetChannelList_Response ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << channelList;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GetChannelList_Response, (::Proud::RmiID)Rmi_GetChannelList_Response);
	}
        
	bool Proxy::Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Filtering;
__msg.Write(__msgid); 
	
__msg << filtering;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Event_Filtering, (::Proud::RmiID)Rmi_Event_Filtering);
	}

	bool Proxy::Event_Filtering ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & filtering)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Filtering;
__msg.Write(__msgid); 
	
__msg << filtering;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Event_Filtering, (::Proud::RmiID)Rmi_Event_Filtering);
	}
        
	bool Proxy::Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Notice;
__msg.Write(__msgid); 
	
__msg << context;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Event_Notice, (::Proud::RmiID)Rmi_Event_Notice);
	}

	bool Proxy::Event_Notice ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & context)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Notice;
__msg.Write(__msgid); 
	
__msg << context;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Event_Notice, (::Proud::RmiID)Rmi_Event_Notice);
	}
        
	bool Proxy::MsgTranslate_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msgKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_Success;
__msg.Write(__msgid); 
	
__msg << msgKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgTranslate_Success, (::Proud::RmiID)Rmi_MsgTranslate_Success);
	}

	bool Proxy::MsgTranslate_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & msgKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_Success;
__msg.Write(__msgid); 
	
__msg << msgKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgTranslate_Success, (::Proud::RmiID)Rmi_MsgTranslate_Success);
	}
        
	bool Proxy::MsgTranslate_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msgKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_Failed;
__msg.Write(__msgid); 
	
__msg << msgKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgTranslate_Failed, (::Proud::RmiID)Rmi_MsgTranslate_Failed);
	}

	bool Proxy::MsgTranslate_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & msgKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgTranslate_Failed;
__msg.Write(__msgid); 
	
__msg << msgKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgTranslate_Failed, (::Proud::RmiID)Rmi_MsgTranslate_Failed);
	}
        
	bool Proxy::MsgRecord_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const tagMsgRecords & records)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Success;
__msg.Write(__msgid); 
	
__msg << records;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgRecord_Success, (::Proud::RmiID)Rmi_MsgRecord_Success);
	}

	bool Proxy::MsgRecord_Success ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const tagMsgRecords & records)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Success;
__msg.Write(__msgid); 
	
__msg << records;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgRecord_Success, (::Proud::RmiID)Rmi_MsgRecord_Success);
	}
        
	bool Proxy::MsgRecord_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MsgRecord_Failed, (::Proud::RmiID)Rmi_MsgRecord_Failed);
	}

	bool Proxy::MsgRecord_Failed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MsgRecord_Failed;
__msg.Write(__msgid); 
	
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MsgRecord_Failed, (::Proud::RmiID)Rmi_MsgRecord_Failed);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Connect_Success =_PNT("Connect_Success");
#else
const PNTCHAR* Proxy::RmiName_Connect_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Connect_Failed =_PNT("Connect_Failed");
#else
const PNTCHAR* Proxy::RmiName_Connect_Failed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelJoin_Success =_PNT("ChannelJoin_Success");
#else
const PNTCHAR* Proxy::RmiName_ChannelJoin_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelJoin_Failed =_PNT("ChannelJoin_Failed");
#else
const PNTCHAR* Proxy::RmiName_ChannelJoin_Failed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelLeave_Success =_PNT("ChannelLeave_Success");
#else
const PNTCHAR* Proxy::RmiName_ChannelLeave_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelLeave_Failed =_PNT("ChannelLeave_Failed");
#else
const PNTCHAR* Proxy::RmiName_ChannelLeave_Failed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_DirectMsg =_PNT("DirectMsg");
#else
const PNTCHAR* Proxy::RmiName_DirectMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("ChannelMsg");
#else
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GetChannelList_Response =_PNT("GetChannelList_Response");
#else
const PNTCHAR* Proxy::RmiName_GetChannelList_Response =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Event_Filtering =_PNT("Event_Filtering");
#else
const PNTCHAR* Proxy::RmiName_Event_Filtering =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Event_Notice =_PNT("Event_Notice");
#else
const PNTCHAR* Proxy::RmiName_Event_Notice =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgTranslate_Success =_PNT("MsgTranslate_Success");
#else
const PNTCHAR* Proxy::RmiName_MsgTranslate_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgTranslate_Failed =_PNT("MsgTranslate_Failed");
#else
const PNTCHAR* Proxy::RmiName_MsgTranslate_Failed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgRecord_Success =_PNT("MsgRecord_Success");
#else
const PNTCHAR* Proxy::RmiName_MsgRecord_Success =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MsgRecord_Failed =_PNT("MsgRecord_Failed");
#else
const PNTCHAR* Proxy::RmiName_MsgRecord_Failed =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Connect_Success;

}



