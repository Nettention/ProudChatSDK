




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace ClientToLogin
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Login_Request(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login_Request;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, ownerUuid);
		ProudChat.CustomMarshaler.Write(__msg, projectUuid);
		ProudChat.CustomMarshaler.Write(__msg, uniqueId);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login_Request, Common.Login_Request);
        }
}

public bool Login_Request(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login_Request;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, ownerUuid);
ProudChat.CustomMarshaler.Write(__msg, projectUuid);
ProudChat.CustomMarshaler.Write(__msg, uniqueId);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login_Request, Common.Login_Request);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="Login_Request";
       
public const string RmiName_First = RmiName_Login_Request;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace LoginToClient
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Login_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String secureKey, System.String address, UInt16 port)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, secureKey);
		ProudChat.CustomMarshaler.Write(__msg, address);
		ProudChat.CustomMarshaler.Write(__msg, port);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login_Success, Common.Login_Success);
        }
}

public bool Login_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String secureKey, System.String address, UInt16 port)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, secureKey);
ProudChat.CustomMarshaler.Write(__msg, address);
ProudChat.CustomMarshaler.Write(__msg, port);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login_Success, Common.Login_Success);
        }
}
public bool Login_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login_Failed, Common.Login_Failed);
        }
}

public bool Login_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login_Failed, Common.Login_Failed);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Success="Login_Success";
public const string RmiName_Login_Failed="Login_Failed";
       
public const string RmiName_First = RmiName_Login_Success;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Success="";
public const string RmiName_Login_Failed="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

