




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace ClientToChat
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool Connect_RequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String secureKey);  
		public Connect_RequestDelegate Connect_Request = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String secureKey)
		{ 
			return false;
		};
		public delegate bool DirectMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg);  
		public DirectMsgDelegate DirectMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg);  
		public ChannelMsgDelegate ChannelMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelJoinDelegate ChannelJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool ChannelLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelLeaveDelegate ChannelLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool GetChannelList_RequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GetChannelList_RequestDelegate GetChannelList_Request = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool MsgTranslateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String src, System.String target, System.String msgKey, System.String msg);  
		public MsgTranslateDelegate MsgTranslate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String src, System.String target, System.String msgKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool MsgTranslate_autoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, System.String msgKey, System.String msg);  
		public MsgTranslate_autoDelegate MsgTranslate_auto = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, System.String msgKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool MsgRecord_ChannelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, UInt16 day, UInt16 cnt);  
		public MsgRecord_ChannelDelegate MsgRecord_Channel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, UInt16 day, UInt16 cnt)
		{ 
			return false;
		};
		public delegate bool MsgRecord_DirectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, UInt16 day, UInt16 cnt);  
		public MsgRecord_DirectDelegate MsgRecord_Direct = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, UInt16 day, UInt16 cnt)
		{ 
			return false;
		};
		public delegate bool MsgRecord_NoticeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UInt16 day, UInt16 cnt);  
		public MsgRecord_NoticeDelegate MsgRecord_Notice = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UInt16 day, UInt16 cnt)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.Connect_Request:
            ProcessReceivedMessage_Connect_Request(__msg, pa, hostTag, remote);
            break;
        case Common.DirectMsg:
            ProcessReceivedMessage_DirectMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelMsg:
            ProcessReceivedMessage_ChannelMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelJoin:
            ProcessReceivedMessage_ChannelJoin(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelLeave:
            ProcessReceivedMessage_ChannelLeave(__msg, pa, hostTag, remote);
            break;
        case Common.GetChannelList_Request:
            ProcessReceivedMessage_GetChannelList_Request(__msg, pa, hostTag, remote);
            break;
        case Common.MsgTranslate:
            ProcessReceivedMessage_MsgTranslate(__msg, pa, hostTag, remote);
            break;
        case Common.MsgTranslate_auto:
            ProcessReceivedMessage_MsgTranslate_auto(__msg, pa, hostTag, remote);
            break;
        case Common.MsgRecord_Channel:
            ProcessReceivedMessage_MsgRecord_Channel(__msg, pa, hostTag, remote);
            break;
        case Common.MsgRecord_Direct:
            ProcessReceivedMessage_MsgRecord_Direct(__msg, pa, hostTag, remote);
            break;
        case Common.MsgRecord_Notice:
            ProcessReceivedMessage_MsgRecord_Notice(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_Connect_Request(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String secureKey; ProudChat.CustomMarshaler.Read(__msg,out secureKey);	
core.PostCheckReadMessage(__msg, RmiName_Connect_Request);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=secureKey.ToString()+",";
        NotifyCallFromStub(Common.Connect_Request, RmiName_Connect_Request,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Connect_Request;
        summary.rmiName = RmiName_Connect_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Connect_Request (remote,ctx , secureKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Connect_Request);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Connect_Request;
        summary.rmiName = RmiName_Connect_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DirectMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String destUniqueID; ProudChat.CustomMarshaler.Read(__msg,out destUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_DirectMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=destUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.DirectMsg, RmiName_DirectMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DirectMsg;
        summary.rmiName = RmiName_DirectMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DirectMsg (remote,ctx , destUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DirectMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DirectMsg;
        summary.rmiName = RmiName_DirectMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelMsg, RmiName_ChannelMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelMsg (remote,ctx , channelKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelJoin, RmiName_ChannelJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelJoin;
        summary.rmiName = RmiName_ChannelJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelJoin (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelJoin;
        summary.rmiName = RmiName_ChannelJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelLeave, RmiName_ChannelLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelLeave;
        summary.rmiName = RmiName_ChannelLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelLeave (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelLeave;
        summary.rmiName = RmiName_ChannelLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetChannelList_Request(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GetChannelList_Request);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GetChannelList_Request, RmiName_GetChannelList_Request,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetChannelList_Request;
        summary.rmiName = RmiName_GetChannelList_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetChannelList_Request (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetChannelList_Request);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetChannelList_Request;
        summary.rmiName = RmiName_GetChannelList_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgTranslate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String src; ProudChat.CustomMarshaler.Read(__msg,out src);	
System.String target; ProudChat.CustomMarshaler.Read(__msg,out target);	
System.String msgKey; ProudChat.CustomMarshaler.Read(__msg,out msgKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_MsgTranslate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=src.ToString()+",";
parameterString+=target.ToString()+",";
parameterString+=msgKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.MsgTranslate, RmiName_MsgTranslate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgTranslate;
        summary.rmiName = RmiName_MsgTranslate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgTranslate (remote,ctx , src, target, msgKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgTranslate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgTranslate;
        summary.rmiName = RmiName_MsgTranslate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgTranslate_auto(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String target; ProudChat.CustomMarshaler.Read(__msg,out target);	
System.String msgKey; ProudChat.CustomMarshaler.Read(__msg,out msgKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_MsgTranslate_auto);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=target.ToString()+",";
parameterString+=msgKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.MsgTranslate_auto, RmiName_MsgTranslate_auto,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgTranslate_auto;
        summary.rmiName = RmiName_MsgTranslate_auto;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgTranslate_auto (remote,ctx , target, msgKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgTranslate_auto);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgTranslate_auto;
        summary.rmiName = RmiName_MsgTranslate_auto;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgRecord_Channel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
UInt16 day; ProudChat.CustomMarshaler.Read(__msg,out day);	
UInt16 cnt; ProudChat.CustomMarshaler.Read(__msg,out cnt);	
core.PostCheckReadMessage(__msg, RmiName_MsgRecord_Channel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=day.ToString()+",";
parameterString+=cnt.ToString()+",";
        NotifyCallFromStub(Common.MsgRecord_Channel, RmiName_MsgRecord_Channel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgRecord_Channel;
        summary.rmiName = RmiName_MsgRecord_Channel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgRecord_Channel (remote,ctx , channelKey, day, cnt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgRecord_Channel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgRecord_Channel;
        summary.rmiName = RmiName_MsgRecord_Channel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgRecord_Direct(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String target; ProudChat.CustomMarshaler.Read(__msg,out target);	
UInt16 day; ProudChat.CustomMarshaler.Read(__msg,out day);	
UInt16 cnt; ProudChat.CustomMarshaler.Read(__msg,out cnt);	
core.PostCheckReadMessage(__msg, RmiName_MsgRecord_Direct);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=target.ToString()+",";
parameterString+=day.ToString()+",";
parameterString+=cnt.ToString()+",";
        NotifyCallFromStub(Common.MsgRecord_Direct, RmiName_MsgRecord_Direct,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgRecord_Direct;
        summary.rmiName = RmiName_MsgRecord_Direct;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgRecord_Direct (remote,ctx , target, day, cnt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgRecord_Direct);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgRecord_Direct;
        summary.rmiName = RmiName_MsgRecord_Direct;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgRecord_Notice(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UInt16 day; ProudChat.CustomMarshaler.Read(__msg,out day);	
UInt16 cnt; ProudChat.CustomMarshaler.Read(__msg,out cnt);	
core.PostCheckReadMessage(__msg, RmiName_MsgRecord_Notice);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=day.ToString()+",";
parameterString+=cnt.ToString()+",";
        NotifyCallFromStub(Common.MsgRecord_Notice, RmiName_MsgRecord_Notice,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgRecord_Notice;
        summary.rmiName = RmiName_MsgRecord_Notice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgRecord_Notice (remote,ctx , day, cnt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgRecord_Notice);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgRecord_Notice;
        summary.rmiName = RmiName_MsgRecord_Notice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Request="Connect_Request";
public const string RmiName_DirectMsg="DirectMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_ChannelJoin="ChannelJoin";
public const string RmiName_ChannelLeave="ChannelLeave";
public const string RmiName_GetChannelList_Request="GetChannelList_Request";
public const string RmiName_MsgTranslate="MsgTranslate";
public const string RmiName_MsgTranslate_auto="MsgTranslate_auto";
public const string RmiName_MsgRecord_Channel="MsgRecord_Channel";
public const string RmiName_MsgRecord_Direct="MsgRecord_Direct";
public const string RmiName_MsgRecord_Notice="MsgRecord_Notice";
       
public const string RmiName_First = RmiName_Connect_Request;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Request="";
public const string RmiName_DirectMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_ChannelJoin="";
public const string RmiName_ChannelLeave="";
public const string RmiName_GetChannelList_Request="";
public const string RmiName_MsgTranslate="";
public const string RmiName_MsgTranslate_auto="";
public const string RmiName_MsgRecord_Channel="";
public const string RmiName_MsgRecord_Direct="";
public const string RmiName_MsgRecord_Notice="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ChatToClient
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool Connect_SuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering, System.String msg);  
		public Connect_SuccessDelegate Connect_Success = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering, System.String msg)
		{ 
			return false;
		};
		public delegate bool Connect_FailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg);  
		public Connect_FailedDelegate Connect_Failed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelJoin_SuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelJoin_SuccessDelegate ChannelJoin_Success = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool ChannelJoin_FailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg);  
		public ChannelJoin_FailedDelegate ChannelJoin_Failed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelLeave_SuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelLeave_SuccessDelegate ChannelLeave_Success = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool ChannelLeave_FailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg);  
		public ChannelLeave_FailedDelegate ChannelLeave_Failed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool DirectMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg);  
		public DirectMsgDelegate DirectMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg);  
		public ChannelMsgDelegate ChannelMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool GetChannelList_ResponseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList);  
		public GetChannelList_ResponseDelegate GetChannelList_Response = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
		{ 
			return false;
		};
		public delegate bool Event_FilteringDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering);  
		public Event_FilteringDelegate Event_Filtering = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering)
		{ 
			return false;
		};
		public delegate bool Event_NoticeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String context);  
		public Event_NoticeDelegate Event_Notice = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String context)
		{ 
			return false;
		};
		public delegate bool MsgTranslate_SuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg);  
		public MsgTranslate_SuccessDelegate MsgTranslate_Success = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool MsgTranslate_FailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg);  
		public MsgTranslate_FailedDelegate MsgTranslate_Failed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool MsgRecord_SuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, tagMsgRecords records);  
		public MsgRecord_SuccessDelegate MsgRecord_Success = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, tagMsgRecords records)
		{ 
			return false;
		};
		public delegate bool MsgRecord_FailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg);  
		public MsgRecord_FailedDelegate MsgRecord_Failed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.Connect_Success:
            ProcessReceivedMessage_Connect_Success(__msg, pa, hostTag, remote);
            break;
        case Common.Connect_Failed:
            ProcessReceivedMessage_Connect_Failed(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelJoin_Success:
            ProcessReceivedMessage_ChannelJoin_Success(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelJoin_Failed:
            ProcessReceivedMessage_ChannelJoin_Failed(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelLeave_Success:
            ProcessReceivedMessage_ChannelLeave_Success(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelLeave_Failed:
            ProcessReceivedMessage_ChannelLeave_Failed(__msg, pa, hostTag, remote);
            break;
        case Common.DirectMsg:
            ProcessReceivedMessage_DirectMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelMsg:
            ProcessReceivedMessage_ChannelMsg(__msg, pa, hostTag, remote);
            break;
        case Common.GetChannelList_Response:
            ProcessReceivedMessage_GetChannelList_Response(__msg, pa, hostTag, remote);
            break;
        case Common.Event_Filtering:
            ProcessReceivedMessage_Event_Filtering(__msg, pa, hostTag, remote);
            break;
        case Common.Event_Notice:
            ProcessReceivedMessage_Event_Notice(__msg, pa, hostTag, remote);
            break;
        case Common.MsgTranslate_Success:
            ProcessReceivedMessage_MsgTranslate_Success(__msg, pa, hostTag, remote);
            break;
        case Common.MsgTranslate_Failed:
            ProcessReceivedMessage_MsgTranslate_Failed(__msg, pa, hostTag, remote);
            break;
        case Common.MsgRecord_Success:
            ProcessReceivedMessage_MsgRecord_Success(__msg, pa, hostTag, remote);
            break;
        case Common.MsgRecord_Failed:
            ProcessReceivedMessage_MsgRecord_Failed(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_Connect_Success(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String filtering; ProudChat.CustomMarshaler.Read(__msg,out filtering);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_Connect_Success);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=filtering.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.Connect_Success, RmiName_Connect_Success,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Connect_Success;
        summary.rmiName = RmiName_Connect_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Connect_Success (remote,ctx , filtering, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Connect_Success);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Connect_Success;
        summary.rmiName = RmiName_Connect_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Connect_Failed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_Connect_Failed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.Connect_Failed, RmiName_Connect_Failed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Connect_Failed;
        summary.rmiName = RmiName_Connect_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Connect_Failed (remote,ctx , msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Connect_Failed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Connect_Failed;
        summary.rmiName = RmiName_Connect_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelJoin_Success(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelJoin_Success);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelJoin_Success, RmiName_ChannelJoin_Success,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelJoin_Success;
        summary.rmiName = RmiName_ChannelJoin_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelJoin_Success (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelJoin_Success);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelJoin_Success;
        summary.rmiName = RmiName_ChannelJoin_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelJoin_Failed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelJoin_Failed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelJoin_Failed, RmiName_ChannelJoin_Failed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelJoin_Failed;
        summary.rmiName = RmiName_ChannelJoin_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelJoin_Failed (remote,ctx , channelKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelJoin_Failed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelJoin_Failed;
        summary.rmiName = RmiName_ChannelJoin_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelLeave_Success(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelLeave_Success);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelLeave_Success, RmiName_ChannelLeave_Success,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelLeave_Success;
        summary.rmiName = RmiName_ChannelLeave_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelLeave_Success (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelLeave_Success);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelLeave_Success;
        summary.rmiName = RmiName_ChannelLeave_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelLeave_Failed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelLeave_Failed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelLeave_Failed, RmiName_ChannelLeave_Failed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelLeave_Failed;
        summary.rmiName = RmiName_ChannelLeave_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelLeave_Failed (remote,ctx , channelKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelLeave_Failed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelLeave_Failed;
        summary.rmiName = RmiName_ChannelLeave_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DirectMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String srcUniqueID; ProudChat.CustomMarshaler.Read(__msg,out srcUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_DirectMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=srcUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.DirectMsg, RmiName_DirectMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DirectMsg;
        summary.rmiName = RmiName_DirectMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DirectMsg (remote,ctx , srcUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DirectMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DirectMsg;
        summary.rmiName = RmiName_DirectMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String srcUniqueID; ProudChat.CustomMarshaler.Read(__msg,out srcUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=srcUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelMsg, RmiName_ChannelMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelMsg (remote,ctx , channelKey, srcUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetChannelList_Response(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.ErrorType errorType; ProudChat.CustomMarshaler.Read(__msg,out errorType);	
System.Collections.Generic.List<System.String> channelList; ProudChat.CustomMarshaler.Read(__msg,out channelList);	
core.PostCheckReadMessage(__msg, RmiName_GetChannelList_Response);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=errorType.ToString()+",";
parameterString+=channelList.ToString()+",";
        NotifyCallFromStub(Common.GetChannelList_Response, RmiName_GetChannelList_Response,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetChannelList_Response;
        summary.rmiName = RmiName_GetChannelList_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetChannelList_Response (remote,ctx , errorType, channelList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetChannelList_Response);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetChannelList_Response;
        summary.rmiName = RmiName_GetChannelList_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Event_Filtering(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String filtering; ProudChat.CustomMarshaler.Read(__msg,out filtering);	
core.PostCheckReadMessage(__msg, RmiName_Event_Filtering);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=filtering.ToString()+",";
        NotifyCallFromStub(Common.Event_Filtering, RmiName_Event_Filtering,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Event_Filtering;
        summary.rmiName = RmiName_Event_Filtering;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Event_Filtering (remote,ctx , filtering );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Event_Filtering);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Event_Filtering;
        summary.rmiName = RmiName_Event_Filtering;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Event_Notice(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String context; ProudChat.CustomMarshaler.Read(__msg,out context);	
core.PostCheckReadMessage(__msg, RmiName_Event_Notice);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=context.ToString()+",";
        NotifyCallFromStub(Common.Event_Notice, RmiName_Event_Notice,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Event_Notice;
        summary.rmiName = RmiName_Event_Notice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Event_Notice (remote,ctx , context );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Event_Notice);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Event_Notice;
        summary.rmiName = RmiName_Event_Notice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgTranslate_Success(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String msgKey; ProudChat.CustomMarshaler.Read(__msg,out msgKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_MsgTranslate_Success);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=msgKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.MsgTranslate_Success, RmiName_MsgTranslate_Success,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgTranslate_Success;
        summary.rmiName = RmiName_MsgTranslate_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgTranslate_Success (remote,ctx , msgKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgTranslate_Success);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgTranslate_Success;
        summary.rmiName = RmiName_MsgTranslate_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgTranslate_Failed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String msgKey; ProudChat.CustomMarshaler.Read(__msg,out msgKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_MsgTranslate_Failed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=msgKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.MsgTranslate_Failed, RmiName_MsgTranslate_Failed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgTranslate_Failed;
        summary.rmiName = RmiName_MsgTranslate_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgTranslate_Failed (remote,ctx , msgKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgTranslate_Failed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgTranslate_Failed;
        summary.rmiName = RmiName_MsgTranslate_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgRecord_Success(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        tagMsgRecords records; ProudChat.CustomMarshaler.Read(__msg,out records);	
core.PostCheckReadMessage(__msg, RmiName_MsgRecord_Success);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=records.ToString()+",";
        NotifyCallFromStub(Common.MsgRecord_Success, RmiName_MsgRecord_Success,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgRecord_Success;
        summary.rmiName = RmiName_MsgRecord_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgRecord_Success (remote,ctx , records );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgRecord_Success);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgRecord_Success;
        summary.rmiName = RmiName_MsgRecord_Success;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MsgRecord_Failed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_MsgRecord_Failed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.MsgRecord_Failed, RmiName_MsgRecord_Failed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MsgRecord_Failed;
        summary.rmiName = RmiName_MsgRecord_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MsgRecord_Failed (remote,ctx , msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MsgRecord_Failed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MsgRecord_Failed;
        summary.rmiName = RmiName_MsgRecord_Failed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Success="Connect_Success";
public const string RmiName_Connect_Failed="Connect_Failed";
public const string RmiName_ChannelJoin_Success="ChannelJoin_Success";
public const string RmiName_ChannelJoin_Failed="ChannelJoin_Failed";
public const string RmiName_ChannelLeave_Success="ChannelLeave_Success";
public const string RmiName_ChannelLeave_Failed="ChannelLeave_Failed";
public const string RmiName_DirectMsg="DirectMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_GetChannelList_Response="GetChannelList_Response";
public const string RmiName_Event_Filtering="Event_Filtering";
public const string RmiName_Event_Notice="Event_Notice";
public const string RmiName_MsgTranslate_Success="MsgTranslate_Success";
public const string RmiName_MsgTranslate_Failed="MsgTranslate_Failed";
public const string RmiName_MsgRecord_Success="MsgRecord_Success";
public const string RmiName_MsgRecord_Failed="MsgRecord_Failed";
       
public const string RmiName_First = RmiName_Connect_Success;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Success="";
public const string RmiName_Connect_Failed="";
public const string RmiName_ChannelJoin_Success="";
public const string RmiName_ChannelJoin_Failed="";
public const string RmiName_ChannelLeave_Success="";
public const string RmiName_ChannelLeave_Failed="";
public const string RmiName_DirectMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_GetChannelList_Response="";
public const string RmiName_Event_Filtering="";
public const string RmiName_Event_Notice="";
public const string RmiName_MsgTranslate_Success="";
public const string RmiName_MsgTranslate_Failed="";
public const string RmiName_MsgRecord_Success="";
public const string RmiName_MsgRecord_Failed="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

