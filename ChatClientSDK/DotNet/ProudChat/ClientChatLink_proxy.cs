




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace ClientToChat
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Connect_Request(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String secureKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Connect_Request;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, secureKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Connect_Request, Common.Connect_Request);
        }
}

public bool Connect_Request(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String secureKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Connect_Request;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, secureKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Connect_Request, Common.Connect_Request);
        }
}
public bool DirectMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.DirectMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, destUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_DirectMsg, Common.DirectMsg);
        }
}

public bool DirectMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.DirectMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, destUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_DirectMsg, Common.DirectMsg);
        }
}
public bool ChannelMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}

public bool ChannelMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}
public bool ChannelJoin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelJoin;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelJoin, Common.ChannelJoin);
        }
}

public bool ChannelJoin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelJoin;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelJoin, Common.ChannelJoin);
        }
}
public bool ChannelLeave(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelLeave;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelLeave, Common.ChannelLeave);
        }
}

public bool ChannelLeave(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelLeave;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelLeave, Common.ChannelLeave);
        }
}
public bool GetChannelList_Request(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.GetChannelList_Request;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_GetChannelList_Request, Common.GetChannelList_Request);
        }
}

public bool GetChannelList_Request(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.GetChannelList_Request;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_GetChannelList_Request, Common.GetChannelList_Request);
        }
}
public bool MsgTranslate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String src, System.String target, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgTranslate;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, src);
		ProudChat.CustomMarshaler.Write(__msg, target);
		ProudChat.CustomMarshaler.Write(__msg, msgKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgTranslate, Common.MsgTranslate);
        }
}

public bool MsgTranslate(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String src, System.String target, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgTranslate;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, src);
ProudChat.CustomMarshaler.Write(__msg, target);
ProudChat.CustomMarshaler.Write(__msg, msgKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgTranslate, Common.MsgTranslate);
        }
}
public bool MsgTranslate_auto(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgTranslate_auto;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, target);
		ProudChat.CustomMarshaler.Write(__msg, msgKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgTranslate_auto, Common.MsgTranslate_auto);
        }
}

public bool MsgTranslate_auto(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String target, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgTranslate_auto;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, target);
ProudChat.CustomMarshaler.Write(__msg, msgKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgTranslate_auto, Common.MsgTranslate_auto);
        }
}
public bool MsgRecord_Channel(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgRecord_Channel;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, day);
		ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgRecord_Channel, Common.MsgRecord_Channel);
        }
}

public bool MsgRecord_Channel(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgRecord_Channel;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, day);
ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgRecord_Channel, Common.MsgRecord_Channel);
        }
}
public bool MsgRecord_Direct(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String target, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgRecord_Direct;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, target);
		ProudChat.CustomMarshaler.Write(__msg, day);
		ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgRecord_Direct, Common.MsgRecord_Direct);
        }
}

public bool MsgRecord_Direct(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String target, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgRecord_Direct;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, target);
ProudChat.CustomMarshaler.Write(__msg, day);
ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgRecord_Direct, Common.MsgRecord_Direct);
        }
}
public bool MsgRecord_Notice(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgRecord_Notice;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, day);
		ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgRecord_Notice, Common.MsgRecord_Notice);
        }
}

public bool MsgRecord_Notice(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, UInt16 day, UInt16 cnt)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgRecord_Notice;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, day);
ProudChat.CustomMarshaler.Write(__msg, cnt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgRecord_Notice, Common.MsgRecord_Notice);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Request="Connect_Request";
public const string RmiName_DirectMsg="DirectMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_ChannelJoin="ChannelJoin";
public const string RmiName_ChannelLeave="ChannelLeave";
public const string RmiName_GetChannelList_Request="GetChannelList_Request";
public const string RmiName_MsgTranslate="MsgTranslate";
public const string RmiName_MsgTranslate_auto="MsgTranslate_auto";
public const string RmiName_MsgRecord_Channel="MsgRecord_Channel";
public const string RmiName_MsgRecord_Direct="MsgRecord_Direct";
public const string RmiName_MsgRecord_Notice="MsgRecord_Notice";
       
public const string RmiName_First = RmiName_Connect_Request;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Request="";
public const string RmiName_DirectMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_ChannelJoin="";
public const string RmiName_ChannelLeave="";
public const string RmiName_GetChannelList_Request="";
public const string RmiName_MsgTranslate="";
public const string RmiName_MsgTranslate_auto="";
public const string RmiName_MsgRecord_Channel="";
public const string RmiName_MsgRecord_Direct="";
public const string RmiName_MsgRecord_Notice="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace ChatToClient
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Connect_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Connect_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, filtering);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Connect_Success, Common.Connect_Success);
        }
}

public bool Connect_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String filtering, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Connect_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, filtering);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Connect_Success, Common.Connect_Success);
        }
}
public bool Connect_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Connect_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Connect_Failed, Common.Connect_Failed);
        }
}

public bool Connect_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Connect_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Connect_Failed, Common.Connect_Failed);
        }
}
public bool ChannelJoin_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelJoin_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelJoin_Success, Common.ChannelJoin_Success);
        }
}

public bool ChannelJoin_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelJoin_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelJoin_Success, Common.ChannelJoin_Success);
        }
}
public bool ChannelJoin_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelJoin_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelJoin_Failed, Common.ChannelJoin_Failed);
        }
}

public bool ChannelJoin_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelJoin_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelJoin_Failed, Common.ChannelJoin_Failed);
        }
}
public bool ChannelLeave_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelLeave_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelLeave_Success, Common.ChannelLeave_Success);
        }
}

public bool ChannelLeave_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelLeave_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelLeave_Success, Common.ChannelLeave_Success);
        }
}
public bool ChannelLeave_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelLeave_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelLeave_Failed, Common.ChannelLeave_Failed);
        }
}

public bool ChannelLeave_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelLeave_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelLeave_Failed, Common.ChannelLeave_Failed);
        }
}
public bool DirectMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.DirectMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_DirectMsg, Common.DirectMsg);
        }
}

public bool DirectMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.DirectMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_DirectMsg, Common.DirectMsg);
        }
}
public bool ChannelMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}

public bool ChannelMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}
public bool GetChannelList_Response(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.GetChannelList_Response;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, errorType);
		ProudChat.CustomMarshaler.Write(__msg, channelList);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_GetChannelList_Response, Common.GetChannelList_Response);
        }
}

public bool GetChannelList_Response(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.GetChannelList_Response;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, errorType);
ProudChat.CustomMarshaler.Write(__msg, channelList);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_GetChannelList_Response, Common.GetChannelList_Response);
        }
}
public bool Event_Filtering(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Event_Filtering;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Event_Filtering, Common.Event_Filtering);
        }
}

public bool Event_Filtering(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Event_Filtering;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Event_Filtering, Common.Event_Filtering);
        }
}
public bool Event_Notice(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String context)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Event_Notice;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, context);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Event_Notice, Common.Event_Notice);
        }
}

public bool Event_Notice(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String context)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Event_Notice;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, context);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Event_Notice, Common.Event_Notice);
        }
}
public bool MsgTranslate_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgTranslate_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, msgKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgTranslate_Success, Common.MsgTranslate_Success);
        }
}

public bool MsgTranslate_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgTranslate_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, msgKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgTranslate_Success, Common.MsgTranslate_Success);
        }
}
public bool MsgTranslate_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgTranslate_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, msgKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgTranslate_Failed, Common.MsgTranslate_Failed);
        }
}

public bool MsgTranslate_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String msgKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgTranslate_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, msgKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgTranslate_Failed, Common.MsgTranslate_Failed);
        }
}
public bool MsgRecord_Success(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, tagMsgRecords records)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgRecord_Success;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, records);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgRecord_Success, Common.MsgRecord_Success);
        }
}

public bool MsgRecord_Success(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, tagMsgRecords records)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgRecord_Success;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, records);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgRecord_Success, Common.MsgRecord_Success);
        }
}
public bool MsgRecord_Failed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.MsgRecord_Failed;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_MsgRecord_Failed, Common.MsgRecord_Failed);
        }
}

public bool MsgRecord_Failed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.MsgRecord_Failed;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_MsgRecord_Failed, Common.MsgRecord_Failed);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Success="Connect_Success";
public const string RmiName_Connect_Failed="Connect_Failed";
public const string RmiName_ChannelJoin_Success="ChannelJoin_Success";
public const string RmiName_ChannelJoin_Failed="ChannelJoin_Failed";
public const string RmiName_ChannelLeave_Success="ChannelLeave_Success";
public const string RmiName_ChannelLeave_Failed="ChannelLeave_Failed";
public const string RmiName_DirectMsg="DirectMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_GetChannelList_Response="GetChannelList_Response";
public const string RmiName_Event_Filtering="Event_Filtering";
public const string RmiName_Event_Notice="Event_Notice";
public const string RmiName_MsgTranslate_Success="MsgTranslate_Success";
public const string RmiName_MsgTranslate_Failed="MsgTranslate_Failed";
public const string RmiName_MsgRecord_Success="MsgRecord_Success";
public const string RmiName_MsgRecord_Failed="MsgRecord_Failed";
       
public const string RmiName_First = RmiName_Connect_Success;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Connect_Success="";
public const string RmiName_Connect_Failed="";
public const string RmiName_ChannelJoin_Success="";
public const string RmiName_ChannelJoin_Failed="";
public const string RmiName_ChannelLeave_Success="";
public const string RmiName_ChannelLeave_Failed="";
public const string RmiName_DirectMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_GetChannelList_Response="";
public const string RmiName_Event_Filtering="";
public const string RmiName_Event_Notice="";
public const string RmiName_MsgTranslate_Success="";
public const string RmiName_MsgTranslate_Failed="";
public const string RmiName_MsgRecord_Success="";
public const string RmiName_MsgRecord_Failed="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

