  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "ClientToLoginLink_common.h"

     
namespace ClientToLogin {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool Login_Request ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ClientToLogin_Login_Request bool Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId) PN_OVERRIDE

#define DEFRMI_ClientToLogin_Login_Request(DerivedClass) bool DerivedClass::Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
#define CALL_ClientToLogin_Login_Request Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
#define PARAM_ClientToLogin_Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Login_Request;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & ) > Login_Request_Function;
		virtual bool Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId) 
		{ 
			if (Login_Request_Function==nullptr) 
				return true; 
			return Login_Request_Function(remote,rmiContext, ownerUuid, projectUuid, uniqueId); 
		}

	};
#endif

}


     
namespace LoginToClient {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool Login_Success ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const uint16_t & )		{ 
			return false;
		} 

#define DECRMI_LoginToClient_Login_Success bool Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port) PN_OVERRIDE

#define DEFRMI_LoginToClient_Login_Success(DerivedClass) bool DerivedClass::Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port)
#define CALL_LoginToClient_Login_Success Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port)
#define PARAM_LoginToClient_Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port)
               
		virtual bool Login_Failed ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_LoginToClient_Login_Failed bool Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_LoginToClient_Login_Failed(DerivedClass) bool DerivedClass::Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)
#define CALL_LoginToClient_Login_Failed Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)
#define PARAM_LoginToClient_Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Login_Success;
		static const PNTCHAR* RmiName_Login_Failed;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const uint16_t & ) > Login_Success_Function;
		virtual bool Login_Success ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & secureKey, const Proud::String & address, const uint16_t & port) 
		{ 
			if (Login_Success_Function==nullptr) 
				return true; 
			return Login_Success_Function(remote,rmiContext, secureKey, address, port); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > Login_Failed_Function;
		virtual bool Login_Failed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & msg) 
		{ 
			if (Login_Failed_Function==nullptr) 
				return true; 
			return Login_Failed_Function(remote,rmiContext, msg); 
		}

	};
#endif

}


